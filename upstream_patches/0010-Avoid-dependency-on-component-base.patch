From: Reinhard Tartler <siretart@tauware.de>
Date: Sun, 1 Sep 2024 09:05:27 -0400
Subject: Avoid dependency on component-base

only used for integration tests
diff --git a/integration/remote/remote_runtime.go b/integration/remote/remote_runtime.go
index 956ca5488..e743edc30 100644
--- a/integration/remote/remote_runtime.go
+++ b/integration/remote/remote_runtime.go
@@ -41,7 +41,6 @@ import (
 
 	"google.golang.org/grpc"
 	"google.golang.org/grpc/credentials/insecure"
-	"k8s.io/component-base/logs/logreduction"
 	runtimeapi "k8s.io/cri-api/pkg/apis/runtime/v1"
 	"k8s.io/klog/v2"
 	utilexec "k8s.io/utils/exec"
@@ -54,8 +53,6 @@ import (
 type RuntimeService struct {
 	timeout       time.Duration
 	runtimeClient runtimeapi.RuntimeServiceClient
-	// Cache last per-container error message to reduce log spam
-	logReduction *logreduction.LogReduction
 }
 
 const (
@@ -84,7 +81,6 @@ func NewRuntimeService(endpoint string, connectionTimeout time.Duration) (intern
 	return &RuntimeService{
 		timeout:       connectionTimeout,
 		runtimeClient: runtimeapi.NewRuntimeServiceClient(conn),
-		logReduction:  logreduction.NewLogReduction(identicalErrorDelay),
 	}, nil
 }
 
@@ -281,7 +277,6 @@ func (r *RuntimeService) StopContainer(containerID string, timeout int64, opts .
 	ctx, cancel := getContextWithTimeout(t)
 	defer cancel()
 
-	r.logReduction.ClearID(containerID)
 	_, err := r.runtimeClient.StopContainer(ctx, &runtimeapi.StopContainerRequest{
 		ContainerId: containerID,
 		Timeout:     timeout,
@@ -302,7 +297,6 @@ func (r *RuntimeService) RemoveContainer(containerID string, opts ...grpc.CallOp
 	ctx, cancel := getContextWithTimeout(r.timeout)
 	defer cancel()
 
-	r.logReduction.ClearID(containerID)
 	_, err := r.runtimeClient.RemoveContainer(ctx, &runtimeapi.RemoveContainerRequest{
 		ContainerId: containerID,
 	}, opts...)
@@ -343,13 +337,8 @@ func (r *RuntimeService) ContainerStatus(containerID string, opts ...grpc.CallOp
 		ContainerId: containerID,
 	}, opts...)
 	if err != nil {
-		// Don't spam the log with endless messages about the same failure.
-		if r.logReduction.ShouldMessageBePrinted(err.Error(), containerID) {
-			klog.Errorf("ContainerStatus %q from runtime service failed: %v", containerID, err)
-		}
 		return nil, err
 	}
-	r.logReduction.ClearID(containerID)
 	klog.V(10).Infof("[RuntimeService] ContainerStatus Response (containerID=%v, status=%v)", containerID, resp.Status)
 
 	if resp.Status != nil {
@@ -552,12 +541,8 @@ func (r *RuntimeService) ContainerStats(containerID string, opts ...grpc.CallOpt
 		ContainerId: containerID,
 	}, opts...)
 	if err != nil {
-		if r.logReduction.ShouldMessageBePrinted(err.Error(), containerID) {
-			klog.Errorf("ContainerStats %q from runtime service failed: %v", containerID, err)
-		}
 		return nil, err
 	}
-	r.logReduction.ClearID(containerID)
 	klog.V(10).Infof("[RuntimeService] ContainerStats Response (containerID=%v, stats=%v)", containerID, resp.GetStats())
 
 	return resp.GetStats(), nil
